/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace Insure {
  export type ActiveTakerDataStruct = {
    provider: string;
    lots: BigNumberish;
    level: BigNumberish;
    expiry: BigNumberish;
  };

  export type ActiveTakerDataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    provider: string;
    lots: BigNumber;
    level: BigNumber;
    expiry: BigNumber;
  };
}

export interface InsureInterface extends utils.Interface {
  functions: {
    "activeProviderTakers(address,uint256)": FunctionFragment;
    "activeTakersPolicies(address,uint256)": FunctionFragment;
    "balance(address)": FunctionFragment;
    "checkPolicies(address)": FunctionFragment;
    "deleteProviderPolicies(uint256[])": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "expiryDates(uint256)": FunctionFragment;
    "getActiveProviderTakers(address)": FunctionFragment;
    "getActiveTakersPolicies(address)": FunctionFragment;
    "openPolicy(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "oracleAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "providers(address,uint256)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setProviderInfo(uint256,uint256,uint256,uint256)": FunctionFragment;
    "usdAddress()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeProviderTakers"
      | "activeTakersPolicies"
      | "balance"
      | "checkPolicies"
      | "deleteProviderPolicies"
      | "deposit"
      | "expiryDates"
      | "getActiveProviderTakers"
      | "getActiveTakersPolicies"
      | "openPolicy"
      | "oracleAddress"
      | "owner"
      | "providers"
      | "setOracle"
      | "setProviderInfo"
      | "usdAddress"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeProviderTakers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "activeTakersPolicies",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkPolicies",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteProviderPolicies",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expiryDates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveProviderTakers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveTakersPolicies",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "openPolicy",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "providers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setProviderInfo",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "usdAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeProviderTakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeTakersPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteProviderPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expiryDates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveProviderTakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveTakersPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openPolicy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "providers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProviderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "NewPolicy(address,uint256)": EventFragment;
    "PolicyClosed(address,address,uint256,uint256,uint256,bool)": EventFragment;
    "PolicyOpened(address,address,uint256,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPolicy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DepositEventObject {
  _address: string;
  _amount: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface NewPolicyEventObject {
  provider: string;
  expiry: BigNumber;
}
export type NewPolicyEvent = TypedEvent<
  [string, BigNumber],
  NewPolicyEventObject
>;

export type NewPolicyEventFilter = TypedEventFilter<NewPolicyEvent>;

export interface PolicyClosedEventObject {
  taker: string;
  provider: string;
  expiry: BigNumber;
  lots: BigNumber;
  level: BigNumber;
  settlementPaid: boolean;
}
export type PolicyClosedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, boolean],
  PolicyClosedEventObject
>;

export type PolicyClosedEventFilter = TypedEventFilter<PolicyClosedEvent>;

export interface PolicyOpenedEventObject {
  taker: string;
  provider: string;
  expiry: BigNumber;
  lots: BigNumber;
  level: BigNumber;
}
export type PolicyOpenedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  PolicyOpenedEventObject
>;

export type PolicyOpenedEventFilter = TypedEventFilter<PolicyOpenedEvent>;

export interface WithdrawEventObject {
  _address: string;
  _amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Insure extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InsureInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeProviderTakers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    activeTakersPolicies(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        provider: string;
        lots: BigNumber;
        level: BigNumber;
        expiry: BigNumber;
      }
    >;

    balance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    checkPolicies(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteProviderPolicies(
      _expiry: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expiryDates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getActiveProviderTakers(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getActiveTakersPolicies(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[Insure.ActiveTakerDataStructOutput[]]>;

    openPolicy(
      _providerAddr: string,
      _expiry: BigNumberish,
      _lots: BigNumberish,
      _level: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracleAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    providers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lots: BigNumber;
        level: BigNumber;
        price: BigNumber;
      }
    >;

    setOracle(
      _oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProviderInfo(
      _expiry: BigNumberish,
      _lots: BigNumberish,
      _level: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdAddress(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activeProviderTakers(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  activeTakersPolicies(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      provider: string;
      lots: BigNumber;
      level: BigNumber;
      expiry: BigNumber;
    }
  >;

  balance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  checkPolicies(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteProviderPolicies(
    _expiry: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expiryDates(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  getActiveProviderTakers(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getActiveTakersPolicies(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<Insure.ActiveTakerDataStructOutput[]>;

  openPolicy(
    _providerAddr: string,
    _expiry: BigNumberish,
    _lots: BigNumberish,
    _level: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracleAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  providers(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      lots: BigNumber;
      level: BigNumber;
      price: BigNumber;
    }
  >;

  setOracle(
    _oracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProviderInfo(
    _expiry: BigNumberish,
    _lots: BigNumberish,
    _level: BigNumberish,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdAddress(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeProviderTakers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    activeTakersPolicies(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        provider: string;
        lots: BigNumber;
        level: BigNumber;
        expiry: BigNumber;
      }
    >;

    balance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkPolicies(_address: string, overrides?: CallOverrides): Promise<void>;

    deleteProviderPolicies(
      _expiry: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    expiryDates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getActiveProviderTakers(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getActiveTakersPolicies(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<Insure.ActiveTakerDataStructOutput[]>;

    openPolicy(
      _providerAddr: string,
      _expiry: BigNumberish,
      _lots: BigNumberish,
      _level: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    oracleAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    providers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lots: BigNumber;
        level: BigNumber;
        price: BigNumber;
      }
    >;

    setOracle(_oracleAddress: string, overrides?: CallOverrides): Promise<void>;

    setProviderInfo(
      _expiry: BigNumberish,
      _lots: BigNumberish,
      _level: BigNumberish,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    usdAddress(overrides?: CallOverrides): Promise<string>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256)"(
      _address?: string | null,
      _amount?: null
    ): DepositEventFilter;
    Deposit(_address?: string | null, _amount?: null): DepositEventFilter;

    "NewPolicy(address,uint256)"(
      provider?: string | null,
      expiry?: null
    ): NewPolicyEventFilter;
    NewPolicy(provider?: string | null, expiry?: null): NewPolicyEventFilter;

    "PolicyClosed(address,address,uint256,uint256,uint256,bool)"(
      taker?: string | null,
      provider?: string | null,
      expiry?: null,
      lots?: null,
      level?: null,
      settlementPaid?: null
    ): PolicyClosedEventFilter;
    PolicyClosed(
      taker?: string | null,
      provider?: string | null,
      expiry?: null,
      lots?: null,
      level?: null,
      settlementPaid?: null
    ): PolicyClosedEventFilter;

    "PolicyOpened(address,address,uint256,uint256,uint256)"(
      taker?: string | null,
      provider?: string | null,
      expiry?: null,
      lots?: null,
      level?: null
    ): PolicyOpenedEventFilter;
    PolicyOpened(
      taker?: string | null,
      provider?: string | null,
      expiry?: null,
      lots?: null,
      level?: null
    ): PolicyOpenedEventFilter;

    "Withdraw(address,uint256)"(
      _address?: string | null,
      _amount?: null
    ): WithdrawEventFilter;
    Withdraw(_address?: string | null, _amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    activeProviderTakers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    activeTakersPolicies(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    checkPolicies(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteProviderPolicies(
      _expiry: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expiryDates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveProviderTakers(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveTakersPolicies(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPolicy(
      _providerAddr: string,
      _expiry: BigNumberish,
      _lots: BigNumberish,
      _level: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracleAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    providers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOracle(
      _oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProviderInfo(
      _expiry: BigNumberish,
      _lots: BigNumberish,
      _level: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdAddress(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeProviderTakers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    activeTakersPolicies(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkPolicies(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteProviderPolicies(
      _expiry: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expiryDates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveProviderTakers(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveTakersPolicies(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPolicy(
      _providerAddr: string,
      _expiry: BigNumberish,
      _lots: BigNumberish,
      _level: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracleAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    providers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOracle(
      _oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProviderInfo(
      _expiry: BigNumberish,
      _lots: BigNumberish,
      _level: BigNumberish,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
